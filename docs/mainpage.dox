/**
\mainpage
\htmlinclude manifest.html

\b Geometry \b Neural \b Network is a Neural Network wich exploit linear algebra 
objects to compute neural network operations. In general with a set of operations
between linear algebra objects any form of the NN can be done. For example 
also a Neural Network where each layer is a cube can be done.
This operations are:
- Dot product
- Transpose
- Addition
- Subtraction
- Hadamard product (element to element)
- Multiplication with a scalar
- Apply a function to every element of linear algebra object
- Multiplication with a matrix


\section implementation Vector implementation
This is the easiest vector implementation where each layer is composed by vectors
self implemented. The aim of this Neural Network is to recognize hand number digits,
wich means convert a hand written number into a [0,9] val.

\section Depenencies

The external libraries needed are:
- \b Boost, used to manage program options
- \b dot [graphviz]


\section Usage
\verbatim
$ mkdir build && cd build
\endverbatim
Will create the build directory
\verbatim
$ cmake ..
\endverbatim
Will create the makefiles and custom targets
\verbatim
$ make
\endverbatim
Will compile the library
\verbatim
$ make test
\endverbatim
Will launch tests for each module
\verbatim
$ ./vectorNeuralNetwork -h
\endverbatim
to see usage
\par Example
\verbatim
$ ./vectorNeuralNetwork -t ../data/mnist_train.csv 
\endverbatim

\subsection istructions Parameters istructions
- \code -s [--save] \endcode will save the configuration weigths at the end of the computation
- \code -t [--train] arg \endcode will train the network with \i arg file in csv format
- \code -p [--put-up] arg \endcode will submit a test set \i arg file in csv format
- \code -w [--weigths] arg \endcode will load the weights from a file in data format

Multiple options can be concatenated, for example it is possible to load a current weights configuration, then train
the network with a specific train_set file, submit a test_set file and at the end store the end configuration in an other
file:
\code
./vectorNeuralNetwork -w ../data/weights1.data -t ../data/train_set.csv -p ../data/test_set.csv -s weights2.data
\endcode

Inside the direcotry \b data there are small training and test sets.

And a typical usage of the program is:

\b NB: inside of buid directory

\code
./vectorNeuralNetwork -t ../data/mnist_train.csv -p ../data/mnist_test.csv -s weights.data
\endcode
And then it is possible to launch the network over 8.csv file:
\code
./vectorNeuralNetwork -p ../data/8.csv -w weights.data
\endcode

Obviously the test set is pretty small, so the result will be bad. Below is
described how to get better dataset.

To download the dataset you can visit https://pjreddie.com/projects/mnist-in-csv
or use \code make get_csv \endcode from build directory with cmake configuration.
*/